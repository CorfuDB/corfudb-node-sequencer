//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Common_ttypes = require('./Common_types')


var ttypes = require('./LogUnitConfigService_types');
//HELPER FUNCTIONS AND STRUCTURES

SimpleLogUnitConfigService_probe_args = function(args) {
};
SimpleLogUnitConfigService_probe_args.prototype = {};
SimpleLogUnitConfigService_probe_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitConfigService_probe_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitConfigService_probe_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitConfigService_probe_result = function(args) {
};
SimpleLogUnitConfigService_probe_result.prototype = {};
SimpleLogUnitConfigService_probe_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitConfigService_probe_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitConfigService_probe_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitConfigService_phase2b_args = function(args) {
  this.config = null;
  if (args) {
    if (args.config !== undefined) {
      this.config = args.config;
    }
  }
};
SimpleLogUnitConfigService_phase2b_args.prototype = {};
SimpleLogUnitConfigService_phase2b_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.config = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitConfigService_phase2b_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitConfigService_phase2b_args');
  if (this.config !== null && this.config !== undefined) {
    output.writeFieldBegin('config', Thrift.Type.STRING, 1);
    output.writeString(this.config);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitConfigService_phase2b_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SimpleLogUnitConfigService_phase2b_result.prototype = {};
SimpleLogUnitConfigService_phase2b_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitConfigService_phase2b_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitConfigService_phase2b_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitConfigService_phase1b_args = function(args) {
  this.masterid = null;
  if (args) {
    if (args.masterid !== undefined) {
      this.masterid = args.masterid;
    }
  }
};
SimpleLogUnitConfigService_phase1b_args.prototype = {};
SimpleLogUnitConfigService_phase1b_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.masterid = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitConfigService_phase1b_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitConfigService_phase1b_args');
  if (this.masterid !== null && this.masterid !== undefined) {
    output.writeFieldBegin('masterid', Thrift.Type.I32, 1);
    output.writeI32(this.masterid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitConfigService_phase1b_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SimpleLogUnitConfigService_phase1b_result.prototype = {};
SimpleLogUnitConfigService_phase1b_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitConfigService_phase1b_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitConfigService_phase1b_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitConfigService_rebuild_args = function(args) {
};
SimpleLogUnitConfigService_rebuild_args.prototype = {};
SimpleLogUnitConfigService_rebuild_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitConfigService_rebuild_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitConfigService_rebuild_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitConfigService_rebuild_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SimpleLogUnitConfigService_rebuild_result.prototype = {};
SimpleLogUnitConfigService_rebuild_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.SimpleLogUnitWrap();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitConfigService_rebuild_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitConfigService_rebuild_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitConfigService_kill_args = function(args) {
};
SimpleLogUnitConfigService_kill_args.prototype = {};
SimpleLogUnitConfigService_kill_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitConfigService_kill_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitConfigService_kill_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitConfigService_kill_result = function(args) {
};
SimpleLogUnitConfigService_kill_result.prototype = {};
SimpleLogUnitConfigService_kill_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitConfigService_kill_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitConfigService_kill_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitConfigServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
SimpleLogUnitConfigServiceClient.prototype = {};
SimpleLogUnitConfigServiceClient.prototype.seqid = function() { return this._seqid; }
SimpleLogUnitConfigServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
SimpleLogUnitConfigServiceClient.prototype.probe = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_probe();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_probe();
  }
};

SimpleLogUnitConfigServiceClient.prototype.send_probe = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('probe', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitConfigService_probe_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitConfigServiceClient.prototype.recv_probe = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitConfigService_probe_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
SimpleLogUnitConfigServiceClient.prototype.phase2b = function(config, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_phase2b(config);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_phase2b(config);
  }
};

SimpleLogUnitConfigServiceClient.prototype.send_phase2b = function(config) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('phase2b', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitConfigService_phase2b_args();
  args.config = config;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitConfigServiceClient.prototype.recv_phase2b = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitConfigService_phase2b_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('phase2b failed: unknown result');
};
SimpleLogUnitConfigServiceClient.prototype.phase1b = function(masterid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_phase1b(masterid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_phase1b(masterid);
  }
};

SimpleLogUnitConfigServiceClient.prototype.send_phase1b = function(masterid) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('phase1b', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitConfigService_phase1b_args();
  args.masterid = masterid;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitConfigServiceClient.prototype.recv_phase1b = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitConfigService_phase1b_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('phase1b failed: unknown result');
};
SimpleLogUnitConfigServiceClient.prototype.rebuild = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rebuild();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rebuild();
  }
};

SimpleLogUnitConfigServiceClient.prototype.send_rebuild = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rebuild', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitConfigService_rebuild_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitConfigServiceClient.prototype.recv_rebuild = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitConfigService_rebuild_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('rebuild failed: unknown result');
};
SimpleLogUnitConfigServiceClient.prototype.kill = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_kill();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_kill();
  }
};

SimpleLogUnitConfigServiceClient.prototype.send_kill = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('kill', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitConfigService_kill_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitConfigServiceClient.prototype.recv_kill = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitConfigService_kill_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
SimpleLogUnitConfigServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
SimpleLogUnitConfigServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

SimpleLogUnitConfigServiceProcessor.prototype.process_probe = function(seqid, input, output) {
  var args = new SimpleLogUnitConfigService_probe_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.probe.length === 0) {
    Q.fcall(this._handler.probe)
      .then(function(result) {
        var result = new SimpleLogUnitConfigService_probe_result({success: result});
        output.writeMessageBegin("probe", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitConfigService_probe_result(err);
        output.writeMessageBegin("probe", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.probe( function (err, result) {
      var result = new SimpleLogUnitConfigService_probe_result((err != null ? err : {success: result}));
      output.writeMessageBegin("probe", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitConfigServiceProcessor.prototype.process_phase2b = function(seqid, input, output) {
  var args = new SimpleLogUnitConfigService_phase2b_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.phase2b.length === 1) {
    Q.fcall(this._handler.phase2b, args.config)
      .then(function(result) {
        var result = new SimpleLogUnitConfigService_phase2b_result({success: result});
        output.writeMessageBegin("phase2b", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitConfigService_phase2b_result(err);
        output.writeMessageBegin("phase2b", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.phase2b(args.config,  function (err, result) {
      var result = new SimpleLogUnitConfigService_phase2b_result((err != null ? err : {success: result}));
      output.writeMessageBegin("phase2b", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitConfigServiceProcessor.prototype.process_phase1b = function(seqid, input, output) {
  var args = new SimpleLogUnitConfigService_phase1b_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.phase1b.length === 1) {
    Q.fcall(this._handler.phase1b, args.masterid)
      .then(function(result) {
        var result = new SimpleLogUnitConfigService_phase1b_result({success: result});
        output.writeMessageBegin("phase1b", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitConfigService_phase1b_result(err);
        output.writeMessageBegin("phase1b", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.phase1b(args.masterid,  function (err, result) {
      var result = new SimpleLogUnitConfigService_phase1b_result((err != null ? err : {success: result}));
      output.writeMessageBegin("phase1b", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitConfigServiceProcessor.prototype.process_rebuild = function(seqid, input, output) {
  var args = new SimpleLogUnitConfigService_rebuild_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rebuild.length === 0) {
    Q.fcall(this._handler.rebuild)
      .then(function(result) {
        var result = new SimpleLogUnitConfigService_rebuild_result({success: result});
        output.writeMessageBegin("rebuild", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitConfigService_rebuild_result(err);
        output.writeMessageBegin("rebuild", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rebuild( function (err, result) {
      var result = new SimpleLogUnitConfigService_rebuild_result((err != null ? err : {success: result}));
      output.writeMessageBegin("rebuild", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitConfigServiceProcessor.prototype.process_kill = function(seqid, input, output) {
  var args = new SimpleLogUnitConfigService_kill_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.kill.length === 0) {
    Q.fcall(this._handler.kill)
      .then(function(result) {
        var result = new SimpleLogUnitConfigService_kill_result({success: result});
        output.writeMessageBegin("kill", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitConfigService_kill_result(err);
        output.writeMessageBegin("kill", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.kill( function (err, result) {
      var result = new SimpleLogUnitConfigService_kill_result((err != null ? err : {success: result}));
      output.writeMessageBegin("kill", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

