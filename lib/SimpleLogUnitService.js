//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Common_ttypes = require('./Common_types')


var ttypes = require('./SimpleLogUnitService_types');
//HELPER FUNCTIONS AND STRUCTURES

SimpleLogUnitService_write_args = function(args) {
  this.hdr = null;
  this.ctnt = null;
  this.et = null;
  if (args) {
    if (args.hdr !== undefined) {
      this.hdr = args.hdr;
    }
    if (args.ctnt !== undefined) {
      this.ctnt = args.ctnt;
    }
    if (args.et !== undefined) {
      this.et = args.et;
    }
  }
};
SimpleLogUnitService_write_args.prototype = {};
SimpleLogUnitService_write_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hdr = new Common_ttypes.UnitServerHdr();
        this.hdr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.ctnt = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readBinary();
          this.ctnt.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.et = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_write_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_write_args');
  if (this.hdr !== null && this.hdr !== undefined) {
    output.writeFieldBegin('hdr', Thrift.Type.STRUCT, 1);
    this.hdr.write(output);
    output.writeFieldEnd();
  }
  if (this.ctnt !== null && this.ctnt !== undefined) {
    output.writeFieldBegin('ctnt', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.ctnt.length);
    for (var iter7 in this.ctnt)
    {
      if (this.ctnt.hasOwnProperty(iter7))
      {
        iter7 = this.ctnt[iter7];
        output.writeBinary(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.et !== null && this.et !== undefined) {
    output.writeFieldBegin('et', Thrift.Type.I32, 3);
    output.writeI32(this.et);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_write_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SimpleLogUnitService_write_result.prototype = {};
SimpleLogUnitService_write_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_write_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_write_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_fix_args = function(args) {
  this.hdr = null;
  if (args) {
    if (args.hdr !== undefined) {
      this.hdr = args.hdr;
    }
  }
};
SimpleLogUnitService_fix_args.prototype = {};
SimpleLogUnitService_fix_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hdr = new Common_ttypes.UnitServerHdr();
        this.hdr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_fix_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_fix_args');
  if (this.hdr !== null && this.hdr !== undefined) {
    output.writeFieldBegin('hdr', Thrift.Type.STRUCT, 1);
    this.hdr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_fix_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SimpleLogUnitService_fix_result.prototype = {};
SimpleLogUnitService_fix_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_fix_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_fix_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_read_args = function(args) {
  this.hdr = null;
  if (args) {
    if (args.hdr !== undefined) {
      this.hdr = args.hdr;
    }
  }
};
SimpleLogUnitService_read_args.prototype = {};
SimpleLogUnitService_read_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hdr = new Common_ttypes.UnitServerHdr();
        this.hdr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_read_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_read_args');
  if (this.hdr !== null && this.hdr !== undefined) {
    output.writeFieldBegin('hdr', Thrift.Type.STRUCT, 1);
    this.hdr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_read_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SimpleLogUnitService_read_result.prototype = {};
SimpleLogUnitService_read_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Common_ttypes.ExtntWrap();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_read_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_read_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_sync_args = function(args) {
};
SimpleLogUnitService_sync_args.prototype = {};
SimpleLogUnitService_sync_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_sync_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_sync_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_sync_result = function(args) {
};
SimpleLogUnitService_sync_result.prototype = {};
SimpleLogUnitService_sync_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_sync_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_sync_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_readmeta_args = function(args) {
  this.hdr = null;
  if (args) {
    if (args.hdr !== undefined) {
      this.hdr = args.hdr;
    }
  }
};
SimpleLogUnitService_readmeta_args.prototype = {};
SimpleLogUnitService_readmeta_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hdr = new Common_ttypes.UnitServerHdr();
        this.hdr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_readmeta_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_readmeta_args');
  if (this.hdr !== null && this.hdr !== undefined) {
    output.writeFieldBegin('hdr', Thrift.Type.STRUCT, 1);
    this.hdr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_readmeta_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SimpleLogUnitService_readmeta_result.prototype = {};
SimpleLogUnitService_readmeta_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Common_ttypes.ExtntWrap();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_readmeta_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_readmeta_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_readHints_args = function(args) {
  this.hdr = null;
  if (args) {
    if (args.hdr !== undefined) {
      this.hdr = args.hdr;
    }
  }
};
SimpleLogUnitService_readHints_args.prototype = {};
SimpleLogUnitService_readHints_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hdr = new Common_ttypes.UnitServerHdr();
        this.hdr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_readHints_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_readHints_args');
  if (this.hdr !== null && this.hdr !== undefined) {
    output.writeFieldBegin('hdr', Thrift.Type.STRUCT, 1);
    this.hdr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_readHints_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SimpleLogUnitService_readHints_result.prototype = {};
SimpleLogUnitService_readHints_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Common_ttypes.Hints();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_readHints_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_readHints_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_setHintsNext_args = function(args) {
  this.hdr = null;
  this.stream = null;
  this.nextOffset = null;
  if (args) {
    if (args.hdr !== undefined) {
      this.hdr = args.hdr;
    }
    if (args.stream !== undefined) {
      this.stream = args.stream;
    }
    if (args.nextOffset !== undefined) {
      this.nextOffset = args.nextOffset;
    }
  }
};
SimpleLogUnitService_setHintsNext_args.prototype = {};
SimpleLogUnitService_setHintsNext_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hdr = new Common_ttypes.UnitServerHdr();
        this.hdr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case -1:
      if (ftype == Thrift.Type.STRING) {
        this.stream = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case -2:
      if (ftype == Thrift.Type.I64) {
        this.nextOffset = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_setHintsNext_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_setHintsNext_args');
  if (this.hdr !== null && this.hdr !== undefined) {
    output.writeFieldBegin('hdr', Thrift.Type.STRUCT, 1);
    this.hdr.write(output);
    output.writeFieldEnd();
  }
  if (this.stream !== null && this.stream !== undefined) {
    output.writeFieldBegin('stream', Thrift.Type.STRING, -1);
    output.writeString(this.stream);
    output.writeFieldEnd();
  }
  if (this.nextOffset !== null && this.nextOffset !== undefined) {
    output.writeFieldBegin('nextOffset', Thrift.Type.I64, -2);
    output.writeI64(this.nextOffset);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_setHintsNext_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SimpleLogUnitService_setHintsNext_result.prototype = {};
SimpleLogUnitService_setHintsNext_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_setHintsNext_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_setHintsNext_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_setHintsTxDec_args = function(args) {
  this.hdr = null;
  this.dec = null;
  if (args) {
    if (args.hdr !== undefined) {
      this.hdr = args.hdr;
    }
    if (args.dec !== undefined) {
      this.dec = args.dec;
    }
  }
};
SimpleLogUnitService_setHintsTxDec_args.prototype = {};
SimpleLogUnitService_setHintsTxDec_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hdr = new Common_ttypes.UnitServerHdr();
        this.hdr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case -1:
      if (ftype == Thrift.Type.BOOL) {
        this.dec = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_setHintsTxDec_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_setHintsTxDec_args');
  if (this.hdr !== null && this.hdr !== undefined) {
    output.writeFieldBegin('hdr', Thrift.Type.STRUCT, 1);
    this.hdr.write(output);
    output.writeFieldEnd();
  }
  if (this.dec !== null && this.dec !== undefined) {
    output.writeFieldBegin('dec', Thrift.Type.BOOL, -1);
    output.writeBool(this.dec);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_setHintsTxDec_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SimpleLogUnitService_setHintsTxDec_result.prototype = {};
SimpleLogUnitService_setHintsTxDec_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_setHintsTxDec_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_setHintsTxDec_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_querytrim_args = function(args) {
};
SimpleLogUnitService_querytrim_args.prototype = {};
SimpleLogUnitService_querytrim_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_querytrim_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_querytrim_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_querytrim_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SimpleLogUnitService_querytrim_result.prototype = {};
SimpleLogUnitService_querytrim_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_querytrim_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_querytrim_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_queryck_args = function(args) {
};
SimpleLogUnitService_queryck_args.prototype = {};
SimpleLogUnitService_queryck_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_queryck_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_queryck_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_queryck_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SimpleLogUnitService_queryck_result.prototype = {};
SimpleLogUnitService_queryck_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_queryck_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_queryck_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_ckpoint_args = function(args) {
  this.hdr = null;
  if (args) {
    if (args.hdr !== undefined) {
      this.hdr = args.hdr;
    }
  }
};
SimpleLogUnitService_ckpoint_args.prototype = {};
SimpleLogUnitService_ckpoint_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.hdr = new Common_ttypes.UnitServerHdr();
        this.hdr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_ckpoint_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_ckpoint_args');
  if (this.hdr !== null && this.hdr !== undefined) {
    output.writeFieldBegin('hdr', Thrift.Type.STRUCT, 1);
    this.hdr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_ckpoint_result = function(args) {
};
SimpleLogUnitService_ckpoint_result.prototype = {};
SimpleLogUnitService_ckpoint_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_ckpoint_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_ckpoint_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_ping_args = function(args) {
};
SimpleLogUnitService_ping_args.prototype = {};
SimpleLogUnitService_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_ping_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_ping_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SimpleLogUnitService_ping_result.prototype = {};
SimpleLogUnitService_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_ping_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_ping_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_reset_args = function(args) {
};
SimpleLogUnitService_reset_args.prototype = {};
SimpleLogUnitService_reset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_reset_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_reset_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_reset_result = function(args) {
};
SimpleLogUnitService_reset_result.prototype = {};
SimpleLogUnitService_reset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_reset_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_reset_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_simulateFailure_args = function(args) {
  this.fail = null;
  this.length = null;
  if (args) {
    if (args.fail !== undefined) {
      this.fail = args.fail;
    }
    if (args.length !== undefined) {
      this.length = args.length;
    }
  }
};
SimpleLogUnitService_simulateFailure_args.prototype = {};
SimpleLogUnitService_simulateFailure_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.fail = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.length = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_simulateFailure_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_simulateFailure_args');
  if (this.fail !== null && this.fail !== undefined) {
    output.writeFieldBegin('fail', Thrift.Type.BOOL, 1);
    output.writeBool(this.fail);
    output.writeFieldEnd();
  }
  if (this.length !== null && this.length !== undefined) {
    output.writeFieldBegin('length', Thrift.Type.I64, 2);
    output.writeI64(this.length);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_simulateFailure_result = function(args) {
};
SimpleLogUnitService_simulateFailure_result.prototype = {};
SimpleLogUnitService_simulateFailure_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_simulateFailure_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_simulateFailure_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_setEpoch_args = function(args) {
  this.epoch = null;
  if (args) {
    if (args.epoch !== undefined) {
      this.epoch = args.epoch;
    }
  }
};
SimpleLogUnitService_setEpoch_args.prototype = {};
SimpleLogUnitService_setEpoch_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.epoch = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_setEpoch_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_setEpoch_args');
  if (this.epoch !== null && this.epoch !== undefined) {
    output.writeFieldBegin('epoch', Thrift.Type.I64, 1);
    output.writeI64(this.epoch);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_setEpoch_result = function(args) {
};
SimpleLogUnitService_setEpoch_result.prototype = {};
SimpleLogUnitService_setEpoch_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_setEpoch_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_setEpoch_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_highestAddress_args = function(args) {
};
SimpleLogUnitService_highestAddress_args.prototype = {};
SimpleLogUnitService_highestAddress_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_highestAddress_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_highestAddress_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitService_highestAddress_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SimpleLogUnitService_highestAddress_result.prototype = {};
SimpleLogUnitService_highestAddress_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitService_highestAddress_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitService_highestAddress_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleLogUnitServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
SimpleLogUnitServiceClient.prototype = {};
SimpleLogUnitServiceClient.prototype.seqid = function() { return this._seqid; }
SimpleLogUnitServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
SimpleLogUnitServiceClient.prototype.write = function(hdr, ctnt, et, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_write(hdr, ctnt, et);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_write(hdr, ctnt, et);
  }
};

SimpleLogUnitServiceClient.prototype.send_write = function(hdr, ctnt, et) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('write', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitService_write_args();
  args.hdr = hdr;
  args.ctnt = ctnt;
  args.et = et;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitServiceClient.prototype.recv_write = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitService_write_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('write failed: unknown result');
};
SimpleLogUnitServiceClient.prototype.fix = function(hdr, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_fix(hdr);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_fix(hdr);
  }
};

SimpleLogUnitServiceClient.prototype.send_fix = function(hdr) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('fix', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitService_fix_args();
  args.hdr = hdr;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitServiceClient.prototype.recv_fix = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitService_fix_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('fix failed: unknown result');
};
SimpleLogUnitServiceClient.prototype.read = function(hdr, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_read(hdr);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_read(hdr);
  }
};

SimpleLogUnitServiceClient.prototype.send_read = function(hdr) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('read', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitService_read_args();
  args.hdr = hdr;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitServiceClient.prototype.recv_read = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitService_read_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('read failed: unknown result');
};
SimpleLogUnitServiceClient.prototype.sync = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sync();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sync();
  }
};

SimpleLogUnitServiceClient.prototype.send_sync = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sync', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitService_sync_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitServiceClient.prototype.recv_sync = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitService_sync_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
SimpleLogUnitServiceClient.prototype.readmeta = function(hdr, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_readmeta(hdr);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_readmeta(hdr);
  }
};

SimpleLogUnitServiceClient.prototype.send_readmeta = function(hdr) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('readmeta', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitService_readmeta_args();
  args.hdr = hdr;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitServiceClient.prototype.recv_readmeta = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitService_readmeta_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('readmeta failed: unknown result');
};
SimpleLogUnitServiceClient.prototype.readHints = function(hdr, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_readHints(hdr);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_readHints(hdr);
  }
};

SimpleLogUnitServiceClient.prototype.send_readHints = function(hdr) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('readHints', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitService_readHints_args();
  args.hdr = hdr;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitServiceClient.prototype.recv_readHints = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitService_readHints_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('readHints failed: unknown result');
};
SimpleLogUnitServiceClient.prototype.setHintsNext = function(hdr, stream, nextOffset, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setHintsNext(hdr, stream, nextOffset);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setHintsNext(hdr, stream, nextOffset);
  }
};

SimpleLogUnitServiceClient.prototype.send_setHintsNext = function(hdr, stream, nextOffset) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setHintsNext', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitService_setHintsNext_args();
  args.hdr = hdr;
  args.stream = stream;
  args.nextOffset = nextOffset;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitServiceClient.prototype.recv_setHintsNext = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitService_setHintsNext_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setHintsNext failed: unknown result');
};
SimpleLogUnitServiceClient.prototype.setHintsTxDec = function(hdr, dec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setHintsTxDec(hdr, dec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setHintsTxDec(hdr, dec);
  }
};

SimpleLogUnitServiceClient.prototype.send_setHintsTxDec = function(hdr, dec) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setHintsTxDec', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitService_setHintsTxDec_args();
  args.hdr = hdr;
  args.dec = dec;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitServiceClient.prototype.recv_setHintsTxDec = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitService_setHintsTxDec_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('setHintsTxDec failed: unknown result');
};
SimpleLogUnitServiceClient.prototype.querytrim = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_querytrim();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_querytrim();
  }
};

SimpleLogUnitServiceClient.prototype.send_querytrim = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('querytrim', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitService_querytrim_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitServiceClient.prototype.recv_querytrim = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitService_querytrim_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('querytrim failed: unknown result');
};
SimpleLogUnitServiceClient.prototype.queryck = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_queryck();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_queryck();
  }
};

SimpleLogUnitServiceClient.prototype.send_queryck = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('queryck', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitService_queryck_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitServiceClient.prototype.recv_queryck = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitService_queryck_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('queryck failed: unknown result');
};
SimpleLogUnitServiceClient.prototype.ckpoint = function(hdr, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ckpoint(hdr);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ckpoint(hdr);
  }
};

SimpleLogUnitServiceClient.prototype.send_ckpoint = function(hdr) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ckpoint', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitService_ckpoint_args();
  args.hdr = hdr;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitServiceClient.prototype.recv_ckpoint = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitService_ckpoint_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
SimpleLogUnitServiceClient.prototype.ping = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ping();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ping();
  }
};

SimpleLogUnitServiceClient.prototype.send_ping = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitService_ping_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitServiceClient.prototype.recv_ping = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitService_ping_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ping failed: unknown result');
};
SimpleLogUnitServiceClient.prototype.reset = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reset();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reset();
  }
};

SimpleLogUnitServiceClient.prototype.send_reset = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reset', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitService_reset_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitServiceClient.prototype.recv_reset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitService_reset_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
SimpleLogUnitServiceClient.prototype.simulateFailure = function(fail, length, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_simulateFailure(fail, length);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_simulateFailure(fail, length);
  }
};

SimpleLogUnitServiceClient.prototype.send_simulateFailure = function(fail, length) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('simulateFailure', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitService_simulateFailure_args();
  args.fail = fail;
  args.length = length;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitServiceClient.prototype.recv_simulateFailure = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitService_simulateFailure_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
SimpleLogUnitServiceClient.prototype.setEpoch = function(epoch, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setEpoch(epoch);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setEpoch(epoch);
  }
};

SimpleLogUnitServiceClient.prototype.send_setEpoch = function(epoch) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setEpoch', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitService_setEpoch_args();
  args.epoch = epoch;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitServiceClient.prototype.recv_setEpoch = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitService_setEpoch_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
SimpleLogUnitServiceClient.prototype.highestAddress = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_highestAddress();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_highestAddress();
  }
};

SimpleLogUnitServiceClient.prototype.send_highestAddress = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('highestAddress', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleLogUnitService_highestAddress_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleLogUnitServiceClient.prototype.recv_highestAddress = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleLogUnitService_highestAddress_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('highestAddress failed: unknown result');
};
SimpleLogUnitServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
SimpleLogUnitServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

SimpleLogUnitServiceProcessor.prototype.process_write = function(seqid, input, output) {
  var args = new SimpleLogUnitService_write_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.write.length === 3) {
    Q.fcall(this._handler.write, args.hdr, args.ctnt, args.et)
      .then(function(result) {
        var result = new SimpleLogUnitService_write_result({success: result});
        output.writeMessageBegin("write", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitService_write_result(err);
        output.writeMessageBegin("write", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.write(args.hdr, args.ctnt, args.et,  function (err, result) {
      var result = new SimpleLogUnitService_write_result((err != null ? err : {success: result}));
      output.writeMessageBegin("write", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitServiceProcessor.prototype.process_fix = function(seqid, input, output) {
  var args = new SimpleLogUnitService_fix_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.fix.length === 1) {
    Q.fcall(this._handler.fix, args.hdr)
      .then(function(result) {
        var result = new SimpleLogUnitService_fix_result({success: result});
        output.writeMessageBegin("fix", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitService_fix_result(err);
        output.writeMessageBegin("fix", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.fix(args.hdr,  function (err, result) {
      var result = new SimpleLogUnitService_fix_result((err != null ? err : {success: result}));
      output.writeMessageBegin("fix", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitServiceProcessor.prototype.process_read = function(seqid, input, output) {
  var args = new SimpleLogUnitService_read_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.read.length === 1) {
    Q.fcall(this._handler.read, args.hdr)
      .then(function(result) {
        var result = new SimpleLogUnitService_read_result({success: result});
        output.writeMessageBegin("read", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitService_read_result(err);
        output.writeMessageBegin("read", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.read(args.hdr,  function (err, result) {
      var result = new SimpleLogUnitService_read_result((err != null ? err : {success: result}));
      output.writeMessageBegin("read", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitServiceProcessor.prototype.process_sync = function(seqid, input, output) {
  var args = new SimpleLogUnitService_sync_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sync.length === 0) {
    Q.fcall(this._handler.sync)
      .then(function(result) {
        var result = new SimpleLogUnitService_sync_result({success: result});
        output.writeMessageBegin("sync", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitService_sync_result(err);
        output.writeMessageBegin("sync", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sync( function (err, result) {
      var result = new SimpleLogUnitService_sync_result((err != null ? err : {success: result}));
      output.writeMessageBegin("sync", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitServiceProcessor.prototype.process_readmeta = function(seqid, input, output) {
  var args = new SimpleLogUnitService_readmeta_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.readmeta.length === 1) {
    Q.fcall(this._handler.readmeta, args.hdr)
      .then(function(result) {
        var result = new SimpleLogUnitService_readmeta_result({success: result});
        output.writeMessageBegin("readmeta", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitService_readmeta_result(err);
        output.writeMessageBegin("readmeta", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.readmeta(args.hdr,  function (err, result) {
      var result = new SimpleLogUnitService_readmeta_result((err != null ? err : {success: result}));
      output.writeMessageBegin("readmeta", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitServiceProcessor.prototype.process_readHints = function(seqid, input, output) {
  var args = new SimpleLogUnitService_readHints_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.readHints.length === 1) {
    Q.fcall(this._handler.readHints, args.hdr)
      .then(function(result) {
        var result = new SimpleLogUnitService_readHints_result({success: result});
        output.writeMessageBegin("readHints", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitService_readHints_result(err);
        output.writeMessageBegin("readHints", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.readHints(args.hdr,  function (err, result) {
      var result = new SimpleLogUnitService_readHints_result((err != null ? err : {success: result}));
      output.writeMessageBegin("readHints", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitServiceProcessor.prototype.process_setHintsNext = function(seqid, input, output) {
  var args = new SimpleLogUnitService_setHintsNext_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setHintsNext.length === 3) {
    Q.fcall(this._handler.setHintsNext, args.hdr, args.stream, args.nextOffset)
      .then(function(result) {
        var result = new SimpleLogUnitService_setHintsNext_result({success: result});
        output.writeMessageBegin("setHintsNext", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitService_setHintsNext_result(err);
        output.writeMessageBegin("setHintsNext", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setHintsNext(args.hdr, args.stream, args.nextOffset,  function (err, result) {
      var result = new SimpleLogUnitService_setHintsNext_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setHintsNext", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitServiceProcessor.prototype.process_setHintsTxDec = function(seqid, input, output) {
  var args = new SimpleLogUnitService_setHintsTxDec_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setHintsTxDec.length === 2) {
    Q.fcall(this._handler.setHintsTxDec, args.hdr, args.dec)
      .then(function(result) {
        var result = new SimpleLogUnitService_setHintsTxDec_result({success: result});
        output.writeMessageBegin("setHintsTxDec", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitService_setHintsTxDec_result(err);
        output.writeMessageBegin("setHintsTxDec", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setHintsTxDec(args.hdr, args.dec,  function (err, result) {
      var result = new SimpleLogUnitService_setHintsTxDec_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setHintsTxDec", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitServiceProcessor.prototype.process_querytrim = function(seqid, input, output) {
  var args = new SimpleLogUnitService_querytrim_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.querytrim.length === 0) {
    Q.fcall(this._handler.querytrim)
      .then(function(result) {
        var result = new SimpleLogUnitService_querytrim_result({success: result});
        output.writeMessageBegin("querytrim", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitService_querytrim_result(err);
        output.writeMessageBegin("querytrim", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.querytrim( function (err, result) {
      var result = new SimpleLogUnitService_querytrim_result((err != null ? err : {success: result}));
      output.writeMessageBegin("querytrim", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitServiceProcessor.prototype.process_queryck = function(seqid, input, output) {
  var args = new SimpleLogUnitService_queryck_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.queryck.length === 0) {
    Q.fcall(this._handler.queryck)
      .then(function(result) {
        var result = new SimpleLogUnitService_queryck_result({success: result});
        output.writeMessageBegin("queryck", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitService_queryck_result(err);
        output.writeMessageBegin("queryck", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.queryck( function (err, result) {
      var result = new SimpleLogUnitService_queryck_result((err != null ? err : {success: result}));
      output.writeMessageBegin("queryck", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitServiceProcessor.prototype.process_ckpoint = function(seqid, input, output) {
  var args = new SimpleLogUnitService_ckpoint_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ckpoint.length === 1) {
    Q.fcall(this._handler.ckpoint, args.hdr)
      .then(function(result) {
        var result = new SimpleLogUnitService_ckpoint_result({success: result});
        output.writeMessageBegin("ckpoint", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitService_ckpoint_result(err);
        output.writeMessageBegin("ckpoint", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ckpoint(args.hdr,  function (err, result) {
      var result = new SimpleLogUnitService_ckpoint_result((err != null ? err : {success: result}));
      output.writeMessageBegin("ckpoint", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitServiceProcessor.prototype.process_ping = function(seqid, input, output) {
  var args = new SimpleLogUnitService_ping_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ping.length === 0) {
    Q.fcall(this._handler.ping)
      .then(function(result) {
        var result = new SimpleLogUnitService_ping_result({success: result});
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitService_ping_result(err);
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ping( function (err, result) {
      var result = new SimpleLogUnitService_ping_result((err != null ? err : {success: result}));
      output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitServiceProcessor.prototype.process_reset = function(seqid, input, output) {
  var args = new SimpleLogUnitService_reset_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reset.length === 0) {
    Q.fcall(this._handler.reset)
      .then(function(result) {
        var result = new SimpleLogUnitService_reset_result({success: result});
        output.writeMessageBegin("reset", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitService_reset_result(err);
        output.writeMessageBegin("reset", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reset( function (err, result) {
      var result = new SimpleLogUnitService_reset_result((err != null ? err : {success: result}));
      output.writeMessageBegin("reset", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitServiceProcessor.prototype.process_simulateFailure = function(seqid, input, output) {
  var args = new SimpleLogUnitService_simulateFailure_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.simulateFailure.length === 2) {
    Q.fcall(this._handler.simulateFailure, args.fail, args.length)
      .then(function(result) {
        var result = new SimpleLogUnitService_simulateFailure_result({success: result});
        output.writeMessageBegin("simulateFailure", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitService_simulateFailure_result(err);
        output.writeMessageBegin("simulateFailure", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.simulateFailure(args.fail, args.length,  function (err, result) {
      var result = new SimpleLogUnitService_simulateFailure_result((err != null ? err : {success: result}));
      output.writeMessageBegin("simulateFailure", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitServiceProcessor.prototype.process_setEpoch = function(seqid, input, output) {
  var args = new SimpleLogUnitService_setEpoch_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setEpoch.length === 1) {
    Q.fcall(this._handler.setEpoch, args.epoch)
      .then(function(result) {
        var result = new SimpleLogUnitService_setEpoch_result({success: result});
        output.writeMessageBegin("setEpoch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitService_setEpoch_result(err);
        output.writeMessageBegin("setEpoch", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setEpoch(args.epoch,  function (err, result) {
      var result = new SimpleLogUnitService_setEpoch_result((err != null ? err : {success: result}));
      output.writeMessageBegin("setEpoch", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleLogUnitServiceProcessor.prototype.process_highestAddress = function(seqid, input, output) {
  var args = new SimpleLogUnitService_highestAddress_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.highestAddress.length === 0) {
    Q.fcall(this._handler.highestAddress)
      .then(function(result) {
        var result = new SimpleLogUnitService_highestAddress_result({success: result});
        output.writeMessageBegin("highestAddress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleLogUnitService_highestAddress_result(err);
        output.writeMessageBegin("highestAddress", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.highestAddress( function (err, result) {
      var result = new SimpleLogUnitService_highestAddress_result((err != null ? err : {success: result}));
      output.writeMessageBegin("highestAddress", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

