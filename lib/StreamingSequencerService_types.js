//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
StreamSequence = module.exports.StreamSequence = function(args) {
  this.position = null;
  this.totalTokens = null;
  if (args) {
    if (args.position !== undefined) {
      this.position = args.position;
    }
    if (args.totalTokens !== undefined) {
      this.totalTokens = args.totalTokens;
    }
  }
};
StreamSequence.prototype = {};
StreamSequence.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.position = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.totalTokens = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StreamSequence.prototype.write = function(output) {
  output.writeStructBegin('StreamSequence');
  if (this.position !== null && this.position !== undefined) {
    output.writeFieldBegin('position', Thrift.Type.I64, 1);
    output.writeI64(this.position);
    output.writeFieldEnd();
  }
  if (this.totalTokens !== null && this.totalTokens !== undefined) {
    output.writeFieldBegin('totalTokens', Thrift.Type.I32, 2);
    output.writeI32(this.totalTokens);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

