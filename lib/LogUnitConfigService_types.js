//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Common_ttypes = require('./Common_types')


var ttypes = module.exports = {};
SimpleLogUnitWrap = module.exports.SimpleLogUnitWrap = function(args) {
  this.err = null;
  this.lowwater = null;
  this.highwater = null;
  this.trimmark = null;
  this.ckmark = null;
  this.ctnt = null;
  this.bmap = null;
  if (args) {
    if (args.err !== undefined) {
      this.err = args.err;
    }
    if (args.lowwater !== undefined) {
      this.lowwater = args.lowwater;
    }
    if (args.highwater !== undefined) {
      this.highwater = args.highwater;
    }
    if (args.trimmark !== undefined) {
      this.trimmark = args.trimmark;
    }
    if (args.ckmark !== undefined) {
      this.ckmark = args.ckmark;
    }
    if (args.ctnt !== undefined) {
      this.ctnt = args.ctnt;
    }
    if (args.bmap !== undefined) {
      this.bmap = args.bmap;
    }
  }
};
SimpleLogUnitWrap.prototype = {};
SimpleLogUnitWrap.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.err = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.lowwater = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.highwater = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.trimmark = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.ckmark = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.ctnt = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readBinary();
          this.ctnt.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.bmap = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleLogUnitWrap.prototype.write = function(output) {
  output.writeStructBegin('SimpleLogUnitWrap');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.I32, 1);
    output.writeI32(this.err);
    output.writeFieldEnd();
  }
  if (this.lowwater !== null && this.lowwater !== undefined) {
    output.writeFieldBegin('lowwater', Thrift.Type.I32, 2);
    output.writeI32(this.lowwater);
    output.writeFieldEnd();
  }
  if (this.highwater !== null && this.highwater !== undefined) {
    output.writeFieldBegin('highwater', Thrift.Type.I32, 3);
    output.writeI32(this.highwater);
    output.writeFieldEnd();
  }
  if (this.trimmark !== null && this.trimmark !== undefined) {
    output.writeFieldBegin('trimmark', Thrift.Type.I64, 4);
    output.writeI64(this.trimmark);
    output.writeFieldEnd();
  }
  if (this.ckmark !== null && this.ckmark !== undefined) {
    output.writeFieldBegin('ckmark', Thrift.Type.I64, 5);
    output.writeI64(this.ckmark);
    output.writeFieldEnd();
  }
  if (this.ctnt !== null && this.ctnt !== undefined) {
    output.writeFieldBegin('ctnt', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRING, this.ctnt.length);
    for (var iter7 in this.ctnt)
    {
      if (this.ctnt.hasOwnProperty(iter7))
      {
        iter7 = this.ctnt[iter7];
        output.writeBinary(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.bmap !== null && this.bmap !== undefined) {
    output.writeFieldBegin('bmap', Thrift.Type.STRING, 7);
    output.writeBinary(this.bmap);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

