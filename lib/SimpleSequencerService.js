//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./SimpleSequencerService_types');
//HELPER FUNCTIONS AND STRUCTURES

SimpleSequencerService_nextpos_args = function(args) {
  this.ntokens = null;
  if (args) {
    if (args.ntokens !== undefined) {
      this.ntokens = args.ntokens;
    }
  }
};
SimpleSequencerService_nextpos_args.prototype = {};
SimpleSequencerService_nextpos_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.ntokens = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleSequencerService_nextpos_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleSequencerService_nextpos_args');
  if (this.ntokens !== null && this.ntokens !== undefined) {
    output.writeFieldBegin('ntokens', Thrift.Type.I32, 1);
    output.writeI32(this.ntokens);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleSequencerService_nextpos_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SimpleSequencerService_nextpos_result.prototype = {};
SimpleSequencerService_nextpos_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleSequencerService_nextpos_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleSequencerService_nextpos_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleSequencerService_recover_args = function(args) {
  this.lowbound = null;
  if (args) {
    if (args.lowbound !== undefined) {
      this.lowbound = args.lowbound;
    }
  }
};
SimpleSequencerService_recover_args.prototype = {};
SimpleSequencerService_recover_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.lowbound = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleSequencerService_recover_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleSequencerService_recover_args');
  if (this.lowbound !== null && this.lowbound !== undefined) {
    output.writeFieldBegin('lowbound', Thrift.Type.I64, 1);
    output.writeI64(this.lowbound);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleSequencerService_recover_result = function(args) {
};
SimpleSequencerService_recover_result.prototype = {};
SimpleSequencerService_recover_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleSequencerService_recover_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleSequencerService_recover_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleSequencerService_simulateFailure_args = function(args) {
  this.fail = null;
  this.length = null;
  if (args) {
    if (args.fail !== undefined) {
      this.fail = args.fail;
    }
    if (args.length !== undefined) {
      this.length = args.length;
    }
  }
};
SimpleSequencerService_simulateFailure_args.prototype = {};
SimpleSequencerService_simulateFailure_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.fail = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.length = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleSequencerService_simulateFailure_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleSequencerService_simulateFailure_args');
  if (this.fail !== null && this.fail !== undefined) {
    output.writeFieldBegin('fail', Thrift.Type.BOOL, 1);
    output.writeBool(this.fail);
    output.writeFieldEnd();
  }
  if (this.length !== null && this.length !== undefined) {
    output.writeFieldBegin('length', Thrift.Type.I64, 2);
    output.writeI64(this.length);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleSequencerService_simulateFailure_result = function(args) {
};
SimpleSequencerService_simulateFailure_result.prototype = {};
SimpleSequencerService_simulateFailure_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleSequencerService_simulateFailure_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleSequencerService_simulateFailure_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleSequencerService_reset_args = function(args) {
};
SimpleSequencerService_reset_args.prototype = {};
SimpleSequencerService_reset_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleSequencerService_reset_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleSequencerService_reset_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleSequencerService_reset_result = function(args) {
};
SimpleSequencerService_reset_result.prototype = {};
SimpleSequencerService_reset_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleSequencerService_reset_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleSequencerService_reset_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleSequencerService_ping_args = function(args) {
};
SimpleSequencerService_ping_args.prototype = {};
SimpleSequencerService_ping_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleSequencerService_ping_args.prototype.write = function(output) {
  output.writeStructBegin('SimpleSequencerService_ping_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleSequencerService_ping_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
SimpleSequencerService_ping_result.prototype = {};
SimpleSequencerService_ping_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SimpleSequencerService_ping_result.prototype.write = function(output) {
  output.writeStructBegin('SimpleSequencerService_ping_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SimpleSequencerServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
SimpleSequencerServiceClient.prototype = {};
SimpleSequencerServiceClient.prototype.seqid = function() { return this._seqid; }
SimpleSequencerServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
SimpleSequencerServiceClient.prototype.nextpos = function(ntokens, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_nextpos(ntokens);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_nextpos(ntokens);
  }
};

SimpleSequencerServiceClient.prototype.send_nextpos = function(ntokens) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('nextpos', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleSequencerService_nextpos_args();
  args.ntokens = ntokens;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleSequencerServiceClient.prototype.recv_nextpos = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleSequencerService_nextpos_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('nextpos failed: unknown result');
};
SimpleSequencerServiceClient.prototype.recover = function(lowbound, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_recover(lowbound);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_recover(lowbound);
  }
};

SimpleSequencerServiceClient.prototype.send_recover = function(lowbound) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('recover', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleSequencerService_recover_args();
  args.lowbound = lowbound;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleSequencerServiceClient.prototype.recv_recover = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleSequencerService_recover_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
SimpleSequencerServiceClient.prototype.simulateFailure = function(fail, length, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_simulateFailure(fail, length);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_simulateFailure(fail, length);
  }
};

SimpleSequencerServiceClient.prototype.send_simulateFailure = function(fail, length) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('simulateFailure', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleSequencerService_simulateFailure_args();
  args.fail = fail;
  args.length = length;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleSequencerServiceClient.prototype.recv_simulateFailure = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleSequencerService_simulateFailure_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
SimpleSequencerServiceClient.prototype.reset = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reset();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reset();
  }
};

SimpleSequencerServiceClient.prototype.send_reset = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('reset', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleSequencerService_reset_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleSequencerServiceClient.prototype.recv_reset = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleSequencerService_reset_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
SimpleSequencerServiceClient.prototype.ping = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_ping();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_ping();
  }
};

SimpleSequencerServiceClient.prototype.send_ping = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('ping', Thrift.MessageType.CALL, this.seqid());
  var args = new SimpleSequencerService_ping_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

SimpleSequencerServiceClient.prototype.recv_ping = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new SimpleSequencerService_ping_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('ping failed: unknown result');
};
SimpleSequencerServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
SimpleSequencerServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

SimpleSequencerServiceProcessor.prototype.process_nextpos = function(seqid, input, output) {
  var args = new SimpleSequencerService_nextpos_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.nextpos.length === 1) {
    Q.fcall(this._handler.nextpos, args.ntokens)
      .then(function(result) {
        var result = new SimpleSequencerService_nextpos_result({success: result});
        output.writeMessageBegin("nextpos", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleSequencerService_nextpos_result(err);
        output.writeMessageBegin("nextpos", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.nextpos(args.ntokens,  function (err, result) {
      var result = new SimpleSequencerService_nextpos_result((err != null ? err : {success: result}));
      output.writeMessageBegin("nextpos", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleSequencerServiceProcessor.prototype.process_recover = function(seqid, input, output) {
  var args = new SimpleSequencerService_recover_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.recover.length === 1) {
    Q.fcall(this._handler.recover, args.lowbound)
      .then(function(result) {
        var result = new SimpleSequencerService_recover_result({success: result});
        output.writeMessageBegin("recover", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleSequencerService_recover_result(err);
        output.writeMessageBegin("recover", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.recover(args.lowbound,  function (err, result) {
      var result = new SimpleSequencerService_recover_result((err != null ? err : {success: result}));
      output.writeMessageBegin("recover", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleSequencerServiceProcessor.prototype.process_simulateFailure = function(seqid, input, output) {
  var args = new SimpleSequencerService_simulateFailure_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.simulateFailure.length === 2) {
    Q.fcall(this._handler.simulateFailure, args.fail, args.length)
      .then(function(result) {
        var result = new SimpleSequencerService_simulateFailure_result({success: result});
        output.writeMessageBegin("simulateFailure", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleSequencerService_simulateFailure_result(err);
        output.writeMessageBegin("simulateFailure", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.simulateFailure(args.fail, args.length,  function (err, result) {
      var result = new SimpleSequencerService_simulateFailure_result((err != null ? err : {success: result}));
      output.writeMessageBegin("simulateFailure", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleSequencerServiceProcessor.prototype.process_reset = function(seqid, input, output) {
  var args = new SimpleSequencerService_reset_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reset.length === 0) {
    Q.fcall(this._handler.reset)
      .then(function(result) {
        var result = new SimpleSequencerService_reset_result({success: result});
        output.writeMessageBegin("reset", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleSequencerService_reset_result(err);
        output.writeMessageBegin("reset", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.reset( function (err, result) {
      var result = new SimpleSequencerService_reset_result((err != null ? err : {success: result}));
      output.writeMessageBegin("reset", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

SimpleSequencerServiceProcessor.prototype.process_ping = function(seqid, input, output) {
  var args = new SimpleSequencerService_ping_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.ping.length === 0) {
    Q.fcall(this._handler.ping)
      .then(function(result) {
        var result = new SimpleSequencerService_ping_result({success: result});
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new SimpleSequencerService_ping_result(err);
        output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.ping( function (err, result) {
      var result = new SimpleSequencerService_ping_result((err != null ? err : {success: result}));
      output.writeMessageBegin("ping", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

